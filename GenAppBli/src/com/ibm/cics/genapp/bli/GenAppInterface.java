package com.ibm.cics.genapp.bli;

/*
 * 
 * Licensed Materials - Property of IBM 
 * 
 * (c) Copyright IBM Corp. 2015 All Rights Reserved.
 * 
 * US Government Users Restricted Rights - Use, duplication or 
 * disclosure restricted by GSA ADP Schedule Contract with
 * IBM Corp.
 * 
 */


import com.ibm.cics.genapp.GenAppException;

/*
 * This interface specifies the top-level business functions available for 
 * the GenApp Liberty front end, as a Web Application or Web Service.
 * 
 * It is designed as far as possible to be self-documenting, 
 * although a description of the functions is also given.
 */

public interface GenAppInterface {

	/*
	 * Customer methods
	 */

	/**
	 * @param cdata CustomerData for new customer, initialized by caller.
	 * @return New customer number generated by business logic.
	 * @throws GenAppException 
	 */
	public int addCustomer(CustomerData cdata) throws GenAppException;

	/**
	 * @return CustomerData object for the customer. Initialised with customer number.
	 * @throws GenAppException for any unexpected error, other than not found.
	 */
	public CustomerData getCustomer(int custNumber) throws GenAppException;

	/**
	 * @param custNumber to be updated.  Must already exist.
	 * @param cdata New customer data to replace current details.  Full replacement.
	 * @throws GenAppException
	 */
	public void updateCustomer(int custNumber, CustomerData cdata) throws GenAppException;

	/**
	 * @param custNumber to be deleted. Must exist. NOT IMPLEMENTED YET -throws GenAppException.
	 * @throws GenAppException
	 */
	public void deleteCustomer(int custNumber) throws GenAppException; 

	/**
	 * @param startCustomer - Start point for list. Returns customer numbers > startCustomer
	 * @param maxCount - Maximum number of customers to return.
	 * @return Customer[] Summary details for customers found, up to maxCount.
	 * NOT IMPLEMENTED YET - throws GenAppException.
	 * @throws GenAppException
	 */
	public Customer[] listCustomers(int startCustomer, int maxCount) throws GenAppException; 

	/*
	 * Policy methods
	 */

	/**
	 * @param custNumber to create the new policy for.
	 * @param pdata PolicyData must be HouseData or CarData (not a bare PolicyData)
	 * @return int - new policy number.
	 * @throws GenAppException
	 */
	public int addPolicy(int custNumber, PolicyData pdata) throws GenAppException;

	/**
	 * @param custNumber - customer number
	 * @param policyNumber - policy number
	 * @param ptype - policy type, must be provided, and must match type of policy for number.
	 * @return PolicyData Data for requested policy (HouseData or CarData).
	 * @throws GenAppException
	 */
	public PolicyData getPolicy(int custNumber, int policyNumber, PolicyType ptype) 
			throws GenAppException;

	/**
	 * @param custNumber - customer number to update policy for.
	 * @param policyNumber - policy number, which must exist for the specified customer.
	 * @param pdata HouseData or CarData to replace existing policy.  
	 * Must be correct type for policyNumber, which must exist.
	 * @throws GenAppException
	 */
	public void updatePolicy(int custNumber, int policyNumber, PolicyData pdata) throws GenAppException;

	/**
	 * @param custNumber - customer number to delete policy.
	 * @param policyNumber - policy to delete. Must exist for the customer.
	 * @param ptype - Type of policy. Must match policy type of policyNumber.
	 * @throws GenAppException
	 */
	public void deletePolicy(int custNumber, int policyNumber, PolicyType ptype) throws GenAppException;

	/**
	 * @param custNumber - Customer to list policies for.
	 * @return PolicyData[] - These are 'bare' PolicyData objects, not HouseData or CarData.
	 * @throws GenAppException
	 * 
	 * NOT IMPLEMENTED YET. throws GenAppException.
	 */
	public PolicyData[] listPolicies(int custNumber) throws GenAppException; 

}
